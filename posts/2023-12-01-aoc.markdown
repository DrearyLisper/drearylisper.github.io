---
title: Advent Of Code in Clojure
tags: aoc, clojure
---

<img style="width: 100%; text-align: center" src="/images/aoc-2023/aoc-logo.gif"/>

## Advent of Code

Очередной год прошел, а значит самое время начать решать [адвент оф код](https://adventofcode.com/2023). Скорей всего уже все знают, но я все равно напомню, что данный формат предполагает, что каждый день мы будем открывать новую задачу, приближая себя таким образом к рождеству и рождественским праздникам.

Это уже третий год, когда я решаю задачки используя только [функциональные языки программирования](https://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5). 

- 2021 год был [годом Haskell](https://github.com/DrearyLisper/aoc-2021)
- 2022 год был [годом OCaml](https://github.com/DrearyLisper/aoc-2022)
- И этот 2023 год будет [годом Clojure!](https://github.com/DrearyLisper/aoc-2023)

В этот раз в добавок к решениям я также планирую делать разбор задач, который будет автоматически публиковаться [онлайн](aoc-2023).

Все это стало возможно благодаря возможностям Clojure и библиотеке [Clerk](https://clerk.vision/) для него. В этом посте я расскажу чуть больше подробностей как это работает.

<!--more-->

## Clojure

Clojure это функциональный язык (и не только), использующий Lisp-о-подобный синтаксис. Это означает, что основные конструкции языка будут составлять S-выражения.

Например, чтобы сложить несколько чисел используется следующее выражение.

```clojure
(+ 1 2 3)
```

Плюсы данного синтаксиса не так очевидны с первого взгляда, но если копать глубже, то можно понять что это дает неограниченные возможности для мета-программирования. Если твой код описывается набором списков, а сам язык при этом сделан так, чтобы хорошо обрабатывать эти списки, то лучший сетап для мета-программирования и придумать сложно. Возможно я смогу рассказать больше деталей про это, но точно не в этот раз.

Сам Clojure реализован и работает поверх JVM, сохраняя все плюсы и минусы использования Java. В плюсы можно записать очень богатую стандартную библиотеку, а в минусы всю остальную реализацию виртуальной машины (шутка).

## Clerk

[Clerk](https://clerk.vision/) это библиотека написанная для Clojure, которая может трансформировать файлы с кодом в jupyter-like ноутбуки, которые можно просматривать из браузера. 

В отличии от jupyter эти ноутбуки нельзя менять через браузер напрямую, только через редактор кода. Но смысл очень схожий, можно открыть на втором мониторе браузер и Clerk будет отслеживать измененные участки кода и обновлять только необходимые части, которые зависят от этих изменений, обновляя при этом страничку автоматически.

## Advent Of Code

Данная комбинация богатого языка и визуализации решений идеально подходит для таким мини-проектов как Advent Of Code. 

Дело только за тем как все настроить и автоматизировать для публикации на [GitHub pages](https://pages.github.com/). Основная идея была подсмотрена у [Elken](https://github.com/elken), запишем кудос ему за это.

Первое что нужно сделать это непосредственно разметить код. В качестве примера можно посмотреть на решение [первой задачи](https://github.com/DrearyLisper/aoc-2023/blob/master/01/day01.clj).

Clerk позволяет добавлять Markdown разметку в комментариях напрямую, что я использую для добавление любого текста, комментирующего происходящее.

```clojure
;; #### Solution

;; Helper function which we will be using for testing solutions on different input files.
^{:nextjournal.clerk/visibility {:code :show :result :hide}}
(defn solve-with [filename solution]
  (with-open [rdr (io/reader filename)]
    (solution (line-seq rdr))))
```

А также через специальные аннотации позволяет выбирать нужно ли включать сам код или вывод работы кода в HTML-страничку.

После того как весь код размечен нужно скомпилировать все файлы в финальный ноутбук. Это проще всего делается через alias внутри файла сборки [deps.edn](https://github.com/DrearyLisper/aoc-2023/blob/master/deps.edn). Данный alias будет запускать компилятор ноутбуков из Clerk, сохраняя все выходные файлы в директории public.

Дело остается за малым, перенести вызов сборки на сторону GitHub, где на каждый новый коммит будет запускаться сборка и публикация новой версии на GitHub pages. Все это делается через [yml конфигурацию сборки](https://github.com/DrearyLisper/aoc-2023/blob/master/.github/workflows/deploy.yml).

Все это в сумме дает мне всегда актуальную версию на сайте [Advent Of Code 2023](https://drearylisper.github.io/aoc-2023/). Isn't it cool?

Надеюсь это было полезно и не очень нудно, как всегда полный код решения всех задач можно будет найти у меня в [GitHub](https://github.com/DrearyLisper/aoc-2023).
